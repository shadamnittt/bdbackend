# from pydantic import BaseModel
# from datetime import datetime
# from typing import Optional


# class AppointmentBase(BaseModel):
#     client_id: int
#     date_time: datetime
#     reason: str
#     comment: Optional[str] = None


# class AppointmentCreate(AppointmentBase):
#     doctor_id: Optional[int] = None   # üëà —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–∞—á–∞


# class AppointmentUpdate(AppointmentBase):
#     doctor_id: Optional[int] = None


# class AppointmentOut(AppointmentBase):
#     id: int
#     doctor_id: Optional[int]

#     class Config:
#         from_attributes = True  # ‚úÖ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLAlchemy

# class DoctorOut(BaseModel):
#     id: int
#     full_name: str
#     specialty: str

#     class Config:
#         orm_mode = True

from pydantic import BaseModel
from datetime import datetime
from typing import Optional


# ----- –ë–ê–ó–ê -----
class AppointmentBase(BaseModel):
    client_id: int
    date_time: datetime
    reason: str
    comment: Optional[str] = None


# ----- –°–û–ó–î–ê–ù–ò–ï -----
class AppointmentCreate(AppointmentBase):
    doctor_id: Optional[int] = None


# ----- –û–ë–ù–û–í–õ–ï–ù–ò–ï -----
class AppointmentUpdate(BaseModel):
    client_id: Optional[int] = None
    date_time: Optional[datetime] = None
    reason: Optional[str] = None
    comment: Optional[str] = None
    doctor_id: Optional[int] = None


# ----- –í–†–ê–ß -----
class DoctorOut(BaseModel):
    id: int
    full_name: str
    specialty: str

    class Config:
        orm_mode = True


# ----- –í–´–í–û–î –ó–ê–ü–ò–°–ï–ô -----
class AppointmentOut(BaseModel):
    id: int
    client_id: int
    date_time: datetime
    reason: str
    comment: Optional[str] = None
    doctor: Optional[DoctorOut] = None   # üëà –≤–º–µ—Å—Ç–æ doctor_id —Ç–µ–ø–µ—Ä—å –≤—Ä–∞—á

    class Config:
        orm_mode = True   # –∏–ª–∏ from_attributes = True
