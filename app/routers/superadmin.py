# app/routers/superadmin.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List

from app.database import get_db
from app.models.user import User
from app.schemas.user import UserCreate, UserOut
from app.schemas.client_schema import ClientOut
from app.crud.user_crud import create_user, delete_user, get_all_users
from app.crud.client_crud import get_clients
from app.dependencies import get_current_user

router = APIRouter(
    prefix="/superadmin",
    tags=["SuperAdmin"]
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
def superadmin_required(current_user: User = Depends(get_current_user)):
    if current_user.role.lower() != "superadmin":
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞")
    return current_user


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@router.post("/users/admin", response_model=UserOut, dependencies=[Depends(superadmin_required)])
def create_admin(user: UserCreate, db: Session = Depends(get_db)):
    user.role = "admin"  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–æ–ª—å
    return create_user(db, user)


# üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.delete("/users/{user_id}", dependencies=[Depends(superadmin_required)])
def remove_user(user_id: int, db: Session = Depends(get_db)):
    success = delete_user(db, user_id)
    if not success:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω"}


# üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
@router.get("/clients/all", response_model=List[ClientOut], dependencies=[Depends(superadmin_required)])
def get_all_clients(db: Session = Depends(get_db)):
    return get_clients(db)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–∞—á—É/–∫–ª–∏–Ω–∏–∫–µ


# üîπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤)
@router.get("/activity", dependencies=[Depends(superadmin_required)])
def get_activity(db: Session = Depends(get_db)):
    users = get_all_users(db)
    clients = get_clients(db)
    return {"users": users, "clients": clients}
